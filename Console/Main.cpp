#include "UseClass.h"
#include "Family.h"
#include "HandGame.h"
#include <conio.h>

void Pixel(int num);
int pixelNum = 0;

enum
{
	LEFT = 1,
	DOWN,
	RIGHT,
	UP = 5,
	ATTACK
};

void main()
{
	system("mode con:cols=300 lines=400");

	// 과제1
	/*UseClass* useClass = new UseClass;
	
	delete useClass;*/
	// 과제2
	/*Family* family = new Family;

	family->setFamilyOne();
	family->setFamilytwo();
	family->printFamily();*/
	// =====================================================
	int pixel = 0;
	int count = 0;
	const int startArr = 500;
	const int groundArr = 1000;
	//const int hpArr = 200;
	int startPixel[startArr] =
	{
		//GAME
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,4,4,4,4,4,7,7,4,4,4,4,4,7,7,4,7,7,7,4,7,7,4,4,4,4,4,7,7,
		7,7,7,4,7,7,7,7,7,7,4,7,7,7,4,7,7,4,4,7,4,4,7,7,4,7,7,7,7,7,7,
		7,7,7,4,7,4,4,4,7,7,4,4,4,4,4,7,7,4,7,4,7,4,7,7,4,4,4,4,4,7,7,
		7,7,7,4,7,7,7,4,7,7,4,7,7,7,4,7,7,4,7,7,7,4,7,7,4,7,7,7,7,7,7,
		7,7,7,4,4,4,4,4,7,7,4,7,7,7,4,7,7,4,7,7,7,4,7,7,4,4,4,4,4,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,4,4,4,4,4,7,4,4,4,4,4,7,4,4,4,4,4,7,4,4,4,4,4,7,4,4,4,4,4,
		7,7,4,7,7,7,7,7,7,7,4,7,7,7,4,7,7,7,4,7,4,7,7,7,4,7,7,7,4,7,7,
		7,7,4,4,4,4,4,7,7,7,4,7,7,7,4,4,4,4,4,7,4,4,4,4,4,7,7,7,4,7,7,
		7,7,7,7,7,7,4,7,7,7,4,7,7,7,4,7,7,7,4,7,4,7,7,4,7,7,7,7,4,7,7,
		7,7,4,4,4,4,4,7,7,7,4,7,7,7,4,7,7,7,4,7,4,7,7,4,4,7,7,7,4,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		
		//START
		
	};
	int startBtn = 0;
	int key = 0;
	//int hp = 100;
	//int enemyHp = 100;
	/*int hpBar[hpArr] =
	{
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		2,2,2,2,2,2,2,2,2,2,1,5,7,7,7,5,7,5,5,5,1,6,6,6,6,6,6,6,6,6,6,
		2,2,2,2,2,2,2,2,2,2,1,5,5,7,5,5,7,5,7,7,1,6,6,6,6,6,6,6,6,6,6,
		2,2,2,2,2,2,2,2,2,2,1,7,5,5,5,7,7,5,5,5,1,6,6,6,6,6,6,6,6,6,6,
		2,2,2,2,2,2,2,2,2,2,1,7,7,5,7,7,7,7,7,5,1,6,6,6,6,6,6,6,6,6,6,
		2,2,2,2,2,2,2,2,2,2,1,7,7,7,7,7,7,5,5,5,1,6,6,6,6,6,6,6,6,6,6,
	};*/
	/*int hpBar[hpArr] =
	{
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		2,2,2,2,2,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	};*/
	int ground[groundArr] =
	{
		// 0 ~ 39
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,


	};
	//printf("검정0, 파랑1, 초록2, 하늘3, 빨강4, 보라5, 노랑6, 흰색7, 회색8, 밝은 파랑9\n");

	// 게임 스타트 출력
	for (int i = 0; i < startArr; ++i)
	{
		Pixel(startPixel[i]);
		if (i != 0 && i % 31 == 0)
		{
			cout << '\n';
		}
		//Sleep(1);
	}
	printf("시작하려면 아무 키나 누르세요.\n");
	startBtn = _getch();
	// 게임 시작
	while (true)
	{
		key = 0;
		system("cls");
		// 맵찍기
		for (int i = 0; i < groundArr; ++i)
		{
			Pixel(ground[i]);
			if (i != 0 && i % 40 == 0)
			{
				cout << '\n';
			}
		}
		
		key = _getch();
		printf("%d\n", key - 48);
		switch (key - 48)
		{
		case LEFT:
		{

			for (int i = 0; i < groundArr; ++i)
			{
				if (ground[i] == 10)
				{
					ground[i - 40] = 10;
					ground[i] = 7;
				}
				if (ground[i] == 8)
				{
					ground[i - 1] = 8;
					ground[i] = 7;
				}
				else if (ground[i] == 4)
				{
					ground[i - 1] = 4;
					ground[i] = 7;
				}
				else if (ground[i] == 5)
				{
					ground[i - 1] = 5;
					ground[i] = 7;
				}
				
			}
		}
		break;
		case DOWN:
		{
			for (int i = groundArr - 1; i > 0 ; --i)
			{
				
				if (ground[i] == 8)
				{
					ground[i + 40] = 8;
					ground[i] = 7;
				}
				else if (ground[i] == 5)
				{
					ground[i + 40] = 5;
					ground[i] = 7;
				}
				else if (ground[i] == 4)
				{
					ground[i + 40] = 4;
					ground[i] = 7;
				}
				if (ground[i] == 10)
				{
					ground[i - 40] = 10;
					ground[i] = 7;
				}
			}
		}
		break;
		case RIGHT:
		{
			for (int i = groundArr - 1; i > 0; --i)
			{
				
				if (ground[i] == 8)
				{
					ground[i + 1] = 8;
					ground[i] = 7;
				}
				else if (ground[i] == 5)
				{
					ground[i + 1] = 5;
					ground[i] = 7;
				}
				else if (ground[i] == 4)
				{
					ground[i + 1] = 4;
					ground[i] = 7;
				}
				if (ground[i] == 10)
				{
					ground[i - 40] = 10;
					ground[i] = 7;
				}
			}
		}
		break;
		case UP:
		{
			for (int i = 0; i < groundArr; ++i)
			{
				
				if (ground[i] == 8)
				{
					ground[i - 40] = 8;
					ground[i] = 7;
				}
				else if (ground[i] == 5)
				{
					ground[i - 40] = 5;
					ground[i] = 7;
				}
				else if (ground[i] == 4)
				{
					ground[i - 40] = 4;
					ground[i] = 7;
				}
				if (ground[i] == 10)
				{
					ground[i - 40] = 10;
					ground[i] = 7;
				}
			}
		}
		break;
		case ATTACK:
		{
			for (int i = groundArr - 1; i > 0; --i)
			{
				if (ground[i] == 4)
				{
					ground[i - 40] = 10;
				}
			}
		}
		break;
		default:
			break;
		}



	}
	
	
	
	
	//while (true)
	//{
	//	pixel = _getch();
	//	Pixel(pixel);
	//	countPixel[count] = pixelNum;
	//	++count;
	//	/*if (pixel == 57)
	//	{
	//		system("cls");
	//		TextColor(7, 0);
	//		printf("검정0, 파랑1, 초록2, 하늘3, 빨강4, 보라5, 노랑6, 흰색7, 회색8, 밝은 파랑9\n");
	//		for (int i = 0; countPixel[i] != 9; ++i)
	//		{
	//			Pixel((countPixel[i] + 48));
	//			if (countPixel[0] == 0)
	//			{
	//				--count;
	//				break;
	//			}
	//			else if (countPixel[i] = 9)
	//			{
	//				countPixel[count] = 0;
	//				--count;
	//				break;
	//			}
	//		}
	//	}*/
	//	
	//	if (count % 100 == 0)
	//	{
	//		cout << '\n';
	//	}
	//	
	//	/*if (count % 100 == 0)
	//	{
	//		cout << '\n';
	//		for (int i = 0; i < 1000; ++i)
	//		{
	//			if (countPixel[i] != 0)
	//			{
	//				TextColor(8, 0);
	//				cout << countPixel[i];
	//				TextColor(0, 0);
	//			}
	//		}
	//		cout << '\n';
	//	}*/
	//}
	
}

/*
과제1. 클래스 사용법 익히기

- 서로 다른 클래스 5개를 생성하고 각각 다른 문구를 출력한다.

EX)
(클래스 이름) 클래스 1번
(클래스 이름) 클래스 2번
(클래스 이름) 클래스 3번
.
.
.
(클래스 이름) 클래스 N번
=> 최대한 효율을 생각하면서 해본다.

과제2. 우리 가족은 말이죠...
- 클래스를 활용해 우리 가족을 소개하는 내용을 출력한다.

객체지향적으로 구성한다.


과제3. 대전 게임 만들기
- 스타트 씬과 게임 씬으로 구성된 대전 게임

- 도트와 색상, 체력바를 필수로 포함한다.

- 플레이어만 공격을 하면 안되며 적 역시 공격을 해야 한다.
ㄴ + 게임 오버 조건 또한 반드시 있어야 한다.


과제4. 가위바위보

- 클래스를 활용해 객체지향으로 나눠온다.

- 최소 클래스는 3개


*/

void Pixel(int num)
{

	switch (num)
	{
	case 0:
	{
		// 검은색
		TextColor(0, 0);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 0;
	}
	break;
	case 1:
	{
		// 파랑색
		TextColor(1, 1);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 1;

	}
	break;
	case 2:
	{
		// 초록색
		TextColor(2, 2);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 2;
	}
	break;
	case 3:
	{
		// 하늘색
		TextColor(3, 3);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 3;
	}
	break;
	case 4:
	{
		// 빨강색
		TextColor(4, 4);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 4;
	}
	break;
	case 5:
	{
		// 보라색
		TextColor(5, 5);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 5;
	}
	break;
	case 6:
	{
		// 노랑색
		TextColor(6, 6);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 6;
	}
	break;
	case 7:
	{
		// 흰색
		TextColor(7, 7);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 7;
	}
	break;
	case 8:
	{
		// 회색
		TextColor(8, 8);
		cout << "■";
		TextColor(7, 0);
		pixelNum = 8;
	}
	break;
	case 9:
	{
		// 밝은 파랑
		TextColor(9, 9);
		cout << "■";
		TextColor(0, 0);
		pixelNum = 9;
		
	}
	break;
	case 10:
	{
		// 밝은 초록
		/*TextColor(10, 10);
		cout << "■";
		TextColor(0, 0);*/
		// 총알
		TextColor(4, 7);
		cout << "●";
		TextColor(7, 0);
	}
	break;
	//case 11:
	//{
	//	// 밝은 하늘
	//	TextColor(11, 11);
	//	cout << "■";
	//	TextColor(0, 0);
	//}
	//break;
	//case 12:
	//{
	//	// 밝은 빨강
	//	TextColor(12, 12);
	//	cout << "■";
	//	TextColor(0, 0);
	//}
	//break;
	//case 13:
	//{
	//	// 밝은 보라색
	//	TextColor(13, 13);
	//	cout << "■";
	//	TextColor(0, 0);
	//}
	//break;
	//case 14:
	//{
	//	// 밝은 노랑색
	//	TextColor(14, 14);
	//	cout << "■";
	//	TextColor(0, 0);
	//}
	//break;
	//case 15:
	//{
	//	// 밝은 흰색
	//	TextColor(15, 15);
	//	cout << "■";
	//	TextColor(0, 0);
	//}
	//break;

	default:
		break;
	}
}