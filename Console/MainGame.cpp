#include "MainGame.h"

// 생성자
MainGame::MainGame() //: _x(0), _y(0)
{
	// 할당 방식
	_Number = 500;
	cout << "당분간 여기에 코딩하자" << endl;
	/*
	- C++ 언어는 생성자에 한해서 멤버 변수를 초기화하는 멤버 이니셜라이저
	라는 기능을 제공한다.
	
	- C++ 언어에서 일반적으로 멤버 이니셜라이저가 필요한 순간은
	ㄴ 1. 객체의 멤버 변수로 심볼릭 상수(const)를 지니고 있을 경우
	ㄴ 2. 상속 관계에서 부모 클래스의 생성자 호출이 필요한 경우

	*/
}

// 소멸자
MainGame::~MainGame()
{
	//! Do Nothing
}

void MainGame::outPut()
{
	cout << _Number << endl;

}
void MainGame::showPosition(void)
{
	cout << "x : " << _x << ", y ; " << _y << endl;
}
void MainGame::movePosition(void)
{
	_x += 100;
	_y += 100;
}
void MainGame::setPosition(int x, int y)
{
	// _x = x;
	// _y = y;
	/*
	this 포인터
	ㄴ 자기 자신을 가리키는 포인터

	- 모든 클래스의 멤버 함수는 자기 자신을 지칭하는 this 키워드를 이용하는
	것이 가능하다.

	- this 키워드를 활용하면 이름 중복에 의해서 발생하는 우선 순위에 대한
	모호함을 완전히 배제할 수 있다.
	*/

	this->_x = x;
	this->_y = y;
}

/*
과제1. 클래스 사용법 익히기

- 서로 다른 클래스 5개를 생성하고 각각 다른 문구를 출력한다.

EX)
(클래스 이름) 클래스 1번
(클래스 이름) 클래스 1번
(클래스 이름) 클래스 1번
.
.
.
(클래스 이름) 클래스 N번
=> 최대한 효율을 생각하면서 해본다.

과제2. 우리 가족은 말이죠...
- 클래스를 활용해 우리 가족을 소개하는 내용을 출력한다.

객체지향적으로 구성한다.


과제3. 대전 게임 만들기
- 스타트 씬과 게임 씬으로 구성된 대전 게임

- 도트와 색상, 체력바를 필수로 포함한다.

- 플레이어만 공격을 하면 안되며 적 역시 공격을 해야 한다.
ㄴ + 게임 오버 조건 또한 반드시 있어야 한다.


과제4. 가위바위보

- 클래스를 활용해 객체지향으로 나눠온다.

- 최소 클래스는 3개


*/