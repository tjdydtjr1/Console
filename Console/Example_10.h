#pragma once
#include <iostream>

using std::cout;
using std::cin;
using std::endl;

#pragma region 배열
/*
=> 배열이란?

- 배열 : 연속되는 나열된

- 언어 개정전에는 동일한 자료형의 데이터를 N개 이상 선언해서 제어 및 관리가 가능한 기능을 의미한다.

- Why -> 배열을 이용하면 간단하게 여러 데이터를 조작하는것이 가능하기 때문에

=> C/C++ 언어의 배열 선언 방법

- 자료형 배열이름[배열 크기];
EX)
int Values[5];				-> int형 데이터 5개를 보관할 수 있는 배열 선언
double dbvalues[5];			-> double형 데이터를 5개를 보관할 수 있는 배열 선언

- 이러한 방식도 되는것을 인지
int[5] Values;

- 배열의 크기는 기본적으로 리터널 상수만을 지원한다.

- 기본적으로 리터널 상수만을 지원하지만 컴파일러에 따라서 심볼릭 상수 또는 변수를
이용해서 배열을 선언하는것도 가능하다.

- 배열의 크기는 컴파일 타임에 결정되기 반면, 변수와 같은 런타임에 할당되기 때문에
기본적으로 배열의 크기를 변수로 정의하는것은 불가능하다.

=> C/C++ 언어의 배열 접근 방법

- 배열은[](인덱스 연산자) 와 인덱스 번호를 통해서 데이터를 접근하는것이 가능하며
인덱스 번호의 범위는 0 ~ 배열의 크기 -1 을 지닌다.
EX)
anValues[0] = 0;
printf("값 : %d\n", anValues[0]);

-> 단, 배열을 이용할 때 잘못된 인덱스 번호를 통해서 데이터의 접근을 시도하면 버그
또는 프로그램이 종료되는 현상이 발생한다.

* 인덱스 번호의 범위에는 항상 주의를 기울여야 한다.
-> 배열에서 부터 논리 오류가 많이 생긴다.


*/
#pragma endregion

namespace EXAMPLE_1
{
	void Example();
}